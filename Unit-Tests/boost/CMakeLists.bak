cmake_minimum_required(VERSION 3.15)
set(BOOST_VERSION 1.73.0)

#
# BOOST_REQUIRED_COMPONENTS
#
if(NOT DEFINED ENV{BOOST_REQUIRED_COMPONENTS})
  message(FATAL_ERROR "Env var BOOST_REQUIRED_COMPONENTS should be defined.")
endif()
set(BOOST_REQUIRED_COMPONENTS $ENV{BOOST_REQUIRED_COMPONENTS})
list(SORT BOOST_REQUIRED_COMPONENTS)
list(REMOVE_DUPLICATES BOOST_REQUIRED_COMPONENTS)
list(REMOVE_ITEM BOOST_REQUIRED_COMPONENTS boost)
set(ENV{BOOST_REQUIRED_COMPONENTS} "${BOOST_REQUIRED_COMPONENTS}")
foreach(Boost_Library $ENV{BOOST_REQUIRED_COMPONENTS})
  message(STATUS "Boost required component: " ${Boost_Library})
endforeach(Boost_Library)

set(BUILD_SHARED_LIBS ON)
set(Boost_USE_MULTITHREADED ON)
set(Boost_USE_STATIC_LIBS OFF)
set(Boost_USE_STATIC_RUNTIME OFF)
set(Boost_USE_DEBUG_LIBS OFF)
set(Boost_USE_DEBUG_RUNTIME OFF)
# IF(CMAKE_BUILD_TYPE MATCHES DEBUG)
if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    message(STATUS "--> Using Boost debug libraries.")
    set(Boost_USE_DEBUG_LIBS ON)
    set(Boost_USE_DEBUG_RUNTIME ON)
else()
    set(Boost_USE_RELEASE_LIBS ON)
    set(Boost_USE_RELEASE_RUNTIME ON)
endif()
set(Boost_ADDITIONAL_VERSIONS "${BOOST_VERSION}")
get_filename_component(BOOST_ROOT "$ENV{BOOST_ROOT}" ABSOLUTE)
if(NOT EXISTS ${BOOST_ROOT})
  message(FATAL_ERROR "BOOST_ROOT is not defined.")
endif()
get_filename_component(BOOST_LIBRARYDIR "$ENV{BOOST_LIBRARYDIR}" ABSOLUTE)
if(NOT EXISTS ${BOOST_LIBRARYDIR})
  # Try to guess location of Boost lib directory:
  if(WIN32)
    get_filename_component(BOOST_LIBRARYDIR "$ENV{BOOST_ROOT}/../../lib" ABSOLUTE)
  endif()
  if(NOT EXISTS ${BOOST_LIBRARYDIR})
    message(FATAL_ERROR "BOOST_LIBRARYDIR is not defined.")
  endif()
endif()
get_filename_component(BOOST_CMAKE_DIR "${BOOST_LIBRARYDIR}/cmake" ABSOLUTE)
if(EXISTS ${BOOST_CMAKE_DIR})
  message(STATUS "Boost find_package path:     " ${BOOST_CMAKE_DIR})
  find_package(Boost ${BOOST_VERSION} REQUIRED
                CONFIG
                COMPONENTS ${BOOST_REQUIRED_COMPONENTS} 
                PATHS ${BOOST_CMAKE_DIR})
else()
  message(STATUS "No Boost find_package path!")
  find_package(Boost ${BOOST_VERSION} REQUIRED
                COMPONENTS ${BOOST_REQUIRED_COMPONENTS})
endif()

if(Boost_FOUND)
  message(STATUS "CMAKE_BUILD_TYPE:            " ${CMAKE_BUILD_TYPE})
  message(STATUS "Boost_VERSION:               " ${Boost_VERSION})
  message(STATUS "BOOST_ROOT:                  " ${BOOST_ROOT})
  message(STATUS "BOOST_LIBRARYDIR:            " ${BOOST_LIBRARYDIR})
  message(STATUS "BOOST_CMAKE_DIR:             " ${BOOST_CMAKE_DIR})
  message(STATUS "Boost_INCLUDE_DIRS:          " ${Boost_INCLUDE_DIRS})
  message(STATUS "Boost_LIBRARY_DIRS:          " ${Boost_LIBRARY_DIRS})
  foreach(boost_libraries_item ${Boost_LIBRARIES})
    message(STATUS "Boost_LIBRARIES item:        " ${boost_libraries_item})
  endforeach()


  # target_compile_definitions(
  #   Boost::boost
  #   INTERFACE
  #   BOOST_ALL_DYN_LINK
  #   BOOST_SYSTEM_NO_DEPRECATED
  #   BOOST_SYSTEM_NO_LIB
  #   BOOST_CONFIG_SUPPRESS_OUTDATED_MESSAGE
  #   _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS)

  # if(WIN32)
  #   target_compile_definitions(
  #     Boost::boost
  #     INTERFACE
  #     BOOST_ASIO_HAS_WINDOWS_STREAM_HANDLE
  #     BOOST_ASIO_HAS_IOCP
  #     BOOST_ASIO_HEADER_ONLY
  #     WINAPI_FAMILY=WINAPI_FAMILY_DESKTOP_APP
  #     _WIN32_WINNT=_WIN32_WINNT_WIN10
  #     _WINSOCK_DEPRECATED_NO_WARNINGS)
  # endif(WIN32)


  #
  # Copy Boost DLLs
  #
  if(WIN32)
    set(BOOST_REDIST_COPY_LIST "")
    foreach(Boost_Library ${Boost_LIBRARIES})
      # print_target_properties(${Boost_Library})
      message(STATUS "Redist Boost_Library:  " ${Boost_Library})
      get_target_property(LIB_RELEASE ${Boost_Library} IMPORTED_IMPLIB_RELEASE)
      get_target_property(LIB_DEBUG ${Boost_Library} IMPORTED_IMPLIB_DEBUG)
      if (CMAKE_BUILD_TYPE STREQUAL "Debug")
          if(LIB_DEBUG)
            message(STATUS "Redist LIB_DEBUG:             " ${LIB_DEBUG})
            string(REPLACE ".lib" ".dll" DLL_DEBUG ${LIB_DEBUG})
            message(STATUS "Redist DLL_DEBUG:             " ${DLL_DEBUG})
            if(EXISTS ${DLL_DEBUG})
              get_filename_component(DLL_FILENAME ${DLL_DEBUG} NAME)
              list(APPEND BOOST_REDIST_COPY_LIST ${DLL_FILENAME})
              message(STATUS "Copied: ${DLL_FILENAME}")
              # Installation:
              install(FILES "${DLL_DEBUG}" DESTINATION bin)
            else()
              message(WARNING "No such Boost DLL: ${DLL_DEBUG}")
            endif()
          endif(LIB_DEBUG)
        else()
          if(LIB_RELEASE)
            message(STATUS "Redist LIB_RELEASE:             " ${LIB_RELEASE})
            string(REPLACE ".lib" ".dll" DLL_RELEASE ${LIB_RELEASE})
            message(STATUS "Redist DLL_RELEASE:             " ${DLL_RELEASE})
            if(EXISTS ${DLL_RELEASE})
              get_filename_component(DLL_FILENAME ${DLL_RELEASE} NAME)
              list(APPEND BOOST_REDIST_COPY_LIST ${DLL_FILENAME})
              message(STATUS "Copied: ${DLL_FILENAME}")
              # Installation:
              install(FILES "${DLL_RELEASE}" DESTINATION bin)
            else()
              message(WARNING "No such Boost DLL: ${DLL_RELEASE}")
            endif()
          endif(LIB_RELEASE)
        endif()
    endforeach(Boost_Library)
    file(TO_NATIVE_PATH "${CMAKE_BINARY_DIR}/RoboCopy-Log-Boost-redist.txt"
         BOOST_REDIST_COPY_LOG)
    # foreach(boost_redist_dll ${BOOST_REDIST_COPY_LIST})
      # message(STATUS "Boost redist copy = " ${boost_redist_dll})
    # endforeach(boost_redist_dll)
    message(STATUS "Boost redist copy log = " ${BOOST_REDIST_COPY_LOG})
    add_custom_target(
      RoboCopy_Boost_Redist ALL
      COMMENT "RoboCopy of Boost redist"
      COMMAND
        START /MIN "RoboCopy of Boost redist" #
        ROBOCOPY /LOG:"${BOOST_REDIST_COPY_LOG}" /COPY:DAT /NP /R:2 /W:2
        "${BOOST_LIBRARYDIR}" "${CMAKE_BINARY_DIR}" ${BOOST_REDIST_COPY_LIST})
  endif(WIN32)

  set_target_properties(Boost::boost PROPERTIES IMPORTED_GLOBAL TRUE)
  foreach(Boost_Library ${Boost_LIBRARIES})
    set_target_properties(${Boost_Library} PROPERTIES IMPORTED_GLOBAL TRUE)
  endforeach(Boost_Library)

endif(Boost_FOUND)
